[unix_http_server]
file=/var/run/supervisor.sock

[supervisord]
logfile=/var/log/supervisor/supervisor.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/var/lock/supervisord.pid
nodaemon=true
minfds=1024 
minprocs=200
user=root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[program:sshd]
command=/opt/horde/bin/supervisor-sshd.sh
process_name=%(program_name)s
numprocs=1
directory=/root
priority=999
autostart=true
startsecs=0
startretries=3
autorestart=unexpected
stopsignal=TERM
stopwaitsecs=10
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/supervisor/sshd.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=1
stderr_logfile=/var/log/supervisor/sshd.error.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=1
environment=PROC_NAME="%(program_name)s",PROC_NUM=%(process_num)d

[program:webui]
command=/opt/horde/bin/supervisor-webui.sh
process_name=%(program_name)s
numprocs=1
directory=/opt/AI-Horde-Worker
priority=999
autostart=true
startsecs=0
startretries=3
autorestart=unexpected
stopsignal=TERM
stopwaitsecs=10
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/supervisor/webui.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=1
stderr_logfile=/var/log/supervisor/webui.error.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=1
environment=PROC_NAME="%(program_name)s"

[program:dreamer]
command=/opt/horde/bin/supervisor-dreamer.sh
process_name=="%(program_name)s_%(process_num)s"
numprocs=%(ENV_GPU_COUNT)s
directory=/opt/AI-Horde-Worker
priority=999
autostart=true
startsecs=10
startretries=3
autorestart=unexpected
stopsignal=TERM
stopwaitsecs=10
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/supervisor/dreamer-%(process_num)s.log
stdout_logfile_maxbytes=20MB
stdout_logfile_backups=1
stderr_logfile=/var/log/supervisor/dreamer-%(process_num)s.error.log
stderr_logfile_maxbytes=20MB
stderr_logfile_backups=1
environment=PROC_NAME="%(program_name)s",PROC_NUM=%(process_num)d

; Tail all the logs to stdout/err for 'docker logs' commmand
; Use this process for capture & events
[program:logtail]
command=/opt/horde/bin/logtail.sh
process_name=%(program_name)s
numprocs=1
directory=/opt/AI-Horde-Worker
priority=999
autostart=true
startsecs=0
startretries=3
autorestart=unexpected
stopsignal=TERM
stopwaitsecs=10
stopasgroup=true
killasgroup=true
; Main process stdout
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stdout_capture_maxbytes=1MB
; Main process stderr
stderr_logfile=/dev/fd/2
stderr_logfile_maxbytes=0
stderr_capture_maxbytes=1MB
environment=PROC_NAME="%(program_name)s"

; The sample eventlistener section below shows all possible eventlistener
; subsection values.  Create one or more 'real' eventlistener: sections to be
; able to handle event notifications sent by supervisord.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req'd)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)
;startretries=3                ; max # of serial start failures when starting (default 3)
;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)
;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stdout_syslog=false           ; send stdout to syslog with process name (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;stderr_syslog=false           ; send stderr to syslog with process name (default false)
;environment=A="1",B="2"       ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The sample group section below shows all possible group values.  Create one
; or more 'real' group: sections to create "heterogeneous" process groups.
